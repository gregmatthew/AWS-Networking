AWS Networking Lab: Troubleshooting a Network Issue

This lab, completed as part of an AWS training module, focuses on troubleshooting a networking issue within an Amazon Web Services (AWS) Virtual Private Cloud (VPC). Below is a summary of the lab objectives, scenario, and tasks performed to resolve the issue.

Objectives

After completing this lab, you will be able to:





Analyze a customer scenario to identify networking issues.



Troubleshoot and resolve connectivity problems in an AWS VPC environment.

Duration

Approximately 1 hour.

Scenario

As a cloud support engineer at AWS, you receive a support request from a consulting company experiencing a networking issue. The customer, Ana, reports that an Apache server created via the command line is unreachable via ping or browser when using the server's IP address. The task is to troubleshoot the issue using a replica of the customer's VPC and resources.

Customer Email

Hello, Cloud Support,
When I create an Apache server through the command line, I cannot ping it. I also get an error when I enter the IP address in the browser. Can you please help figure out what is blocking my connection?
Thanks!
Ana
Contractor

Tasks

Task 1: Connect to an Amazon Linux EC2 Instance via SSH





Objective: Establish an SSH connection to an Amazon Linux EC2 instance to begin troubleshooting.



Steps:





Access the AWS Management Console by selecting the "AWS" button after starting the lab.



Retrieve the public IP address and download the labsuser.ppk file from the lab's "Details" panel.



Use PuTTY (for Windows users) to configure an SSH session:





Download and install PuTTY if not already installed.



Configure the session using the public IP and labsuser.ppk file as per AWS documentation.



Connect to the EC2 instance to proceed with troubleshooting.

Task 2: Install and Verify Apache HTTP Server (httpd)





Objective: Install and start the Apache HTTP server on the EC2 instance.



Steps:





Check the status of the httpd service:

sudo systemctl status httpd.service





Expected output: Service is inactive (not started).



Start the httpd service:

sudo systemctl start httpd.service



Verify the service is active:

sudo systemctl status httpd.service





Expected output: Service is active and running.



Attempt to access the Apache server by entering the instance's public IP in a browser:

http://<PUBLIC_IP_OF_INSTANCE>





Note: The page may not load at this stage due to network configuration issues.

Task 3: Investigate the Customer's VPC Configuration





Objective: Identify and resolve the networking issue preventing access to the Apache server.



Steps:





Access the AWS Management Console and navigate to the VPC service.



Inspect the following VPC components using the left navigation pane:





Subnets: Verify that route tables are correctly associated with subnets.



Route Tables: Confirm routes are properly configured (e.g., a route to an Internet Gateway for 0.0.0.0/0).



Internet Gateway: Ensure an Internet Gateway is attached to the VPC.



Security Groups: Check for inbound rules allowing HTTP (port 80) and/or HTTPS (port 443) traffic.



Network ACLs: Verify that ACL rules permit necessary traffic (e.g., HTTP/HTTPS and ICMP for ping).



Test connectivity:





Attempt to ping external websites (e.g., www.amazon.com) to confirm Internet Gateway and route table functionality.



Note: Apache typically uses HTTP (port 80) or HTTPS (port 443).



After correcting any misconfigurations (e.g., adding an inbound rule for port 80 in the Security Group), test the Apache server again:

http://<PUBLIC_IP_OF_INSTANCE>





Expected output: The Apache test page should load successfully.






The Apache server was installed and running but initially inaccessible due to VPC configuration issues.


Conclusion

This lab demonstrated the process of troubleshooting a network connectivity issue in an AWS VPC. By systematically analyzing subnets, route tables, Internet Gateways, Security Groups, and Network ACLs, the issue was resolved, allowing the Apache server to be accessible via its public IP.

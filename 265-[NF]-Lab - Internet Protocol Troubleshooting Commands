Internet Protocol Troubleshooting Commands Lab

Objectives

After completing this lab, you should be able to:





Practice troubleshooting commands



Identify how you can use these commands in customer scenarios

Duration

This lab requires approximately 30 minutes to complete.

Scenario

You are a new network administrator troubleshooting customer issues.

AWS Service Restrictions

In this lab environment, access to AWS services and service actions might be restricted to those required to complete the lab instructions. You might encounter errors if you attempt to access other services or perform actions beyond those described.

Accessing the AWS Management Console





Choose Start Lab to launch your lab. A Start Lab panel opens, displaying the lab status.





Tip: If you need more time, choose Start Lab again to restart the timer.



Wait until the message Lab status: ready appears, then close the Start Lab panel by choosing the X.



Choose AWS to open the AWS Management Console in a new browser tab. The system will automatically log you in.





Tip: If a new tab does not open, check for a browser banner or icon indicating pop-up blocking. Select it and choose Allow pop-ups.



Arrange the AWS Management Console tab alongside these instructions for easier navigation.

Task 1: Use SSH to Connect to an Amazon Linux EC2 Instance

In this task, you will connect to an Amazon Linux EC2 instance using an SSH utility. Instructions vary slightly for Windows and macOS/Linux users.

Windows Users: Using SSH to Connect





Select the Details drop-down menu and choose Show to display the Credentials window.



Select Download PPK and save the labsuser.ppk file (typically to the Downloads directory).



Note the PublicIP address.



Exit the Details panel by selecting the X.



Download PuTTY to SSH into the Amazon EC2 instance. If not installed, download it from PuTTY's official site.



Open putty.exe.



Configure your PuTTY session by following the directions in Connect to your Linux instance using PuTTY.



Proceed to Task 2.

macOS/Linux Users

Follow standard SSH instructions for connecting to the EC2 instance using the provided credentials and PublicIP address.

Task 2: Practice Troubleshooting Commands

This task involves using troubleshooting commands aligned with the Open Systems Interconnection (OSI) model to diagnose network issues.

The OSI Model and Troubleshooting

Troubleshooting commands correlate with OSI model layers, as shown below:

Layer 3 (Network): ping and traceroute Commands

Customer Scenario for ping:A customer has launched an EC2 instance and needs to test connectivity. Use the ping command to verify Internet Control Message Protocol (ICMP) requests are allowed by security groups and network ACLs.

In the Linux terminal, run:

ping 8.8.8.8 -c 5





Explanation: The -c 5 option specifies five ICMP echo requests. The command tests connectivity to a server (e.g., 8.8.8.8) and returns round-trip times. Use ping to troubleshoot connectivity issues or ensure continuous network traffic.

Customer Scenario for traceroute:A customer reports latency and packet loss. Use traceroute to determine if the issue lies with AWS or the customer's ISP.

In the Linux terminal, run:

traceroute 8.8.8.8





Explanation: This command traces the path to the destination (e.g., 8.8.8.8), reporting latency and packet loss at each hop. Packet loss (shown as percentages) or failed hops (three asterisks *) may indicate issues with the user's LAN, ISP, or server connection.

Layer 4 (Transport): netstat and telnet Commands

Customer Scenario for netstat:A security scan reveals a compromised port on a subnet. Use netstat to confirm if the port is listening.

In the Linux terminal, run:

netstat -tulnp





Options:





-t: Shows TCP connections.



-u: Shows UDP connections.



-l: Lists listening services.



-n: Displays numerical port numbers.



-p: Shows the program/process ID.



Explanation: This command provides a snapshot of layer 4 connectivity, showing established and listening ports to help diagnose network issues.

Customer Scenario for telnet:A customer suspects port 80 is open despite security group rules blocking it. Use telnet to verify.

First, install telnet:

sudo yum install telnet -y

Then, run:

telnet www.google.com 80





Explanation: This command tests TCP connectivity to a server on a specified port. A successful connection indicates no blocking; "connection refused" suggests a firewall or security group issue; "connection timed out" may indicate a network routing issue.

Layer 7 (Application): curl Command

Customer Scenario for curl:A customer wants to verify if their Apache server returns a 200 OK response, indicating a successful website.

In the Linux terminal, run:

curl -v -o /dev/null https://aws.amazon.com





Options:





-v: Verbose output, showing request details.



-o /dev/null: Discards HTML/CSS response data.



Explanation: The curl command tests HTTP/HTTPS connectivity to a server, verifying successful requests (e.g., 200 OK). It supports multiple protocols and is useful for troubleshooting application-layer communication.

Lab Complete

Congratulations! You have completed the lab.





Select End Lab at the top of the page and confirm by selecting Test.



A panel will appear indicating "DELETE has been initiated... You may close this message box now."



Close the panel by selecting the X in the top right corner.
